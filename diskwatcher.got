package store

import (
    "time"
    "sync/atomic"

    "github.com/ricochet2200/go-disk-usage/du"
)

type {{.t}}DiskWatcherState struct {
    freeDisableThreshold   uint64
    freeReenableThreshold  uint64
    usageDisableThreshold  float32
    usageReenableThreshold float32
    free                   uint64
    used                   uint64
    size                   uint64
    freetoc                uint64
    usedtoc                uint64
    sizetoc                uint64
}

func (store *Default{{.T}}Store) diskWatcherConfig(cfg *{{.T}}StoreConfig) {
    store.diskWatcherState.freeDisableThreshold = cfg.FreeDisableThreshold
    store.diskWatcherState.freeReenableThreshold = cfg.FreeReenableThreshold
    store.diskWatcherState.usageDisableThreshold = cfg.UsageDisableThreshold
    store.diskWatcherState.usageReenableThreshold = cfg.UsageReenableThreshold
}

func (store *Default{{.T}}Store) diskWatcherLaunch() {
    go store.diskWatcher()
}

func (store *Default{{.T}}Store) diskWatcher() {
    disabled := false
    for {
        time.Sleep(time.Minute)
        u := du.NewDiskUsage(store.path)
        utoc := u
        if store.pathtoc != store.path {
            utoc = du.NewDiskUsage(store.pathtoc)
        }
		free := u.Free()
		used := u.Used()
		size := u.Size()
		usage := u.Usage()
		freetoc := utoc.Free()
		usedtoc := utoc.Used()
		sizetoc := utoc.Size()
		usagetoc := utoc.Usage()
		atomic.StoreUint64(&store.diskWatcherState.free, free)
		atomic.StoreUint64(&store.diskWatcherState.used, used)
		atomic.StoreUint64(&store.diskWatcherState.size, size)
		atomic.StoreUint64(&store.diskWatcherState.freetoc, freetoc)
		atomic.StoreUint64(&store.diskWatcherState.usedtoc, usedtoc)
		atomic.StoreUint64(&store.diskWatcherState.sizetoc, sizetoc)
		if !disabled && store.diskWatcherState.freeDisableThreshold > 1 && (free <= store.diskWatcherState.freeDisableThreshold || freetoc <= store.diskWatcherState.freeDisableThreshold) {
            store.logCritical("passed the free threshold for automatic disabling\n")
            store.enableWrites(false) // false indicates non-user call
            disabled = false
        }
        if !disabled && store.diskWatcherState.usageDisableThreshold > 0 && (usage >= store.diskWatcherState.usageDisableThreshold || usagetoc >= store.diskWatcherState.usageDisableThreshold) {
            store.logCritical("passed the usage threshold for automatic disabling\n")
            store.enableWrites(false) // false indicates non-user call
            disabled = false
        }
		if disabled && store.diskWatcherState.freeReenableThreshold > 1 && free >= store.diskWatcherState.freeReenableThreshold && freetoc >= store.diskWatcherState.freeReenableThreshold {
            store.logCritical("passed the free threshold for automatic re-enabling\n")
            store.enableWrites(false) // false indicates non-user call
            disabled = false
        }
        if disabled && store.diskWatcherState.usageReenableThreshold > 0 && usage <= store.diskWatcherState.usageReenableThreshold && usagetoc <= store.diskWatcherState.usageReenableThreshold {
            store.logCritical("passed the usage threshold for automatic re-enabling\n")
            store.enableWrites(false) // false indicates non-user call
            disabled = false
        }
    }
}
