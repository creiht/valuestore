package store

import (
    "time"
    "sync/atomic"
)

type {{.t}}FlusherState struct {
    flusherThreshold int32
}

func (store *Default{{.T}}Store) flusherConfig(cfg *{{.T}}StoreConfig) {
    store.flusherState.flusherThreshold = cfg.FlusherThreshold
}

func (store *Default{{.T}}Store) flusherLaunch() {
    go store.flusher()
}

func (store *Default{{.T}}Store) flusher() {
    for {
        time.Sleep(time.Minute)
        m := atomic.LoadInt32(&store.modifications)
        atomic.AddInt32(&store.modifications, -m)
        if m < store.flusherState.flusherThreshold {
            store.Flush()
        }
    }
}
